import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;
import org.bouncycastle.openssl.PEMParser;
import org.bouncycastle.openssl.jcajce.JceOpenSSLPKCS8DecryptorProviderBuilder;
import org.bouncycastle.operator.InputDecryptorProvider;

import java.io.StringReader;

public class PrivateKeyDecryptionService {

    public static String decryptPrivateKey(String encryptedKey, String passphrase) throws Exception {
        // Parse the encrypted private key (PEM format)
        PEMParser pemParser = new PEMParser(new StringReader(encryptedKey));
        Object parsedObject = pemParser.readObject();

        // Check if it is an encrypted private key
        if (!(parsedObject instanceof org.bouncycastle.openssl.PKCS8EncryptedPrivateKeyInfo)) {
            throw new IllegalArgumentException("Invalid private key format");
        }

        // Decrypt the key using Bouncy Castle
        org.bouncycastle.openssl.PKCS8EncryptedPrivateKeyInfo encryptedPrivateKeyInfo =
                (org.bouncycastle.openssl.PKCS8EncryptedPrivateKeyInfo) parsedObject;

        JceOpenSSLPKCS8DecryptorProviderBuilder decryptorProviderBuilder =
                new JceOpenSSLPKCS8DecryptorProviderBuilder();
        InputDecryptorProvider decryptorProvider =
                decryptorProviderBuilder.build(passphrase.toCharArray());

        byte[] decryptedKeyBytes = encryptedPrivateKeyInfo.decryptPrivateKeyInfo(decryptorProvider).getEncoded();

        // Convert to PrivateKey object
        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(decryptedKeyBytes);
        KeyFactory keyFactory = KeyFactory.getInstance("RSA");
        PrivateKey privateKey = keyFactory.generatePrivate(keySpec);

        // Encode the private key in PEM format
        String pemFormattedKey = "-----BEGIN PRIVATE KEY-----\n"
                + Base64.getMimeEncoder(64).encodeToString(privateKey.getEncoded())
                + "\n-----END PRIVATE KEY-----";

        return pemFormattedKey;
    }

    public static void main(String[] args) throws Exception {
        // Example encrypted private key and passphrase
        String encryptedPrivateKey = "-----BEGIN ENCRYPTED PRIVATE KEY-----\n..."; // Your key here
        String passphrase = "your-passphrase";

        String decryptedPrivateKey = decryptPrivateKey(encryptedPrivateKey, passphrase);

        System.out.println("Decrypted Private Key:\n" + decryptedPrivateKey);
    }
}