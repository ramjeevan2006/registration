logging:
  level:
    org.springframework.cloud.gcp: DEBUG
    org.springframework.boot.context.properties: DEBUG


INSERT INTO credit_card_amp_accessrole (role_id, role_name, role_description, role_abbreviation)
VALUES 
(1, 'Admin', 'Administrator Role', 'ADM'),
(2, 'User', 'User Role', 'USR'),
(3, 'Viewer', 'Viewer Role', 'VWR');


INSERT INTO credit_card_amp_entitlement (entitlement_id, channel_entitlement_id, entitlement_name, entitlement_description, channel_name, request_type)
VALUES 
(1, 'CHANNEL_001', 'Read Access', 'Access to read data', 'Online Channel', 'GET'),
(2, 'CHANNEL_002', 'Write Access', 'Access to write data', 'Mobile Channel', 'POST'),
(3, 'CHANNEL_003', 'Admin Access', 'Admin level access', 'Admin Channel', 'ALL');


INSERT INTO credit_card_amp_policy (policy_id, bu_partner_id, access_role_id, policy_name, policy_description, policy_abbreviation)
VALUES 
(1, 1, 1, 'Default Admin Policy', 'Policy for administrators', 'ADM_POL'),
(2, 2, 2, 'Default User Policy', 'Policy for users', 'USR_POL'),
(3, 3, 3, 'Default Viewer Policy', 'Policy for viewers', 'VWR_POL');


INSERT INTO credit_card_amp_accessrole_entitlement (entitlement_id, role_id)
VALUES 
(1, 1),
(2, 2),
(3, 3);


INSERT INTO credit_card_amp_policy_entitlement (entitlement_id, policy_id)
VALUES 
(1, 1),
(2, 2),
(3, 3);

ENTRYPOINT ["java","-jar","/app/your-spring-boot-app.jar"]


CREATE TABLE security (
    cusip STRING PRIMARY KEY,
    ticker STRING,
    strategy_source STRING,
    as_of_date DATE,
    shares_quantity NUMBER(18,2),
    shares_outstanding NUMBER(18,2),
    market_value NUMBER(18,2)
);
INSERT INTO security (cusip, ticker, strategy_source, as_of_date, shares_quantity, shares_outstanding, market_value)
VALUES 
('123456789', 'AAPL', 'CSIM MFs', '2024-06-05', 500000.00, 1000000.00, 1500000.50),
('987654321', 'MSFT', 'CSIM MFs', '2024-06-05', 750000.00, 2000000.00, 2500000.75);
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

@Entity
@Table(name = "credit_card_customers")
public class CreditCardCustomer {

    @Id
    @Column(name = "customer_id")
    private Long customerId;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @Column(name = "embossing_name")
    private String embossingName;

    @Column(name = "middle_name")
    private String middleName;

    @Column(name = "suffix")
    private String suffix;

    @Column(name = "residential_country_code")
    private String residentialCountryCode;

    @Column(name = "last_4_ssn")
    private String last4Ssn;

    @Column(name = "birth_date")
    private LocalDate birthDate;

    @Column(name = "deceased_date")
    private LocalDate deceasedDate;

    @Column(name = "language_preferred_code")
    private String languagePreferredCode;

    @Column(name = "is_language_affirmed")
    private Boolean isLanguageAffirmed;

    @Column(name = "language_affirm_date")
    private LocalDate languageAffirmDate;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date")
    private LocalDateTime createdDate;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "updated_date")
    private LocalDateTime updatedDate;

    // Getters and Setters
}

@Embeddable
public class CreditCardCustomerEmailId implements Serializable {

    @Column(name = "customer_id")
    private Long customerId;

    @Column(name = "email_id")
    private Long emailId;

    // Getters, Setters, equals(), and hashCode() methods
}


@OneToMany(mappedBy = "customer")
private List<CreditCardCustomerEmail> emails;

@ManyToOne
@JoinColumn(name = "customer_id", insertable = false, updatable = false)
private CreditCardCustomer customer;

@Entity
@Table(name = "credit_card_customers")
public class CreditCardCustomer {

    @Id
    @Column(name = "customer_id")
    private Long customerId;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @Column(name = "embossing_name")
    private String embossingName;

    @Column(name = "middle_name")
    private String middleName;

    @Column(name = "suffix")
    private String suffix;

    @Column(name = "residential_country_code")
    private String residentialCountryCode;

    @Column(name = "last_4_ssn")
    private String last4Ssn;

    @Column(name = "birth_date")
    private LocalDate birthDate;

    @Column(name = "deceased_date")
    private LocalDate deceasedDate;

    @Column(name = "language_preferred_code")
    private String languagePreferredCode;

    @Column(name = "is_language_affirmed")
    private Boolean isLanguageAffirmed;

    @Column(name = "language_affirm_date")
    private LocalDate languageAffirmDate;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date")
    private LocalDateTime createdDate;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "updated_date")
    private LocalDateTime updatedDate;

    // Getters and Setters
}

@Entity
@Table(name = "credit_card_customer_email_by_customer_id")
public class CreditCardCustomerEmail {

    @EmbeddedId
    private CreditCardCustomerEmailId id;

    @Column(name = "email_address")
    private String emailAddress;

    @Column(name = "last_maintain_timestamp")
    private LocalDateTime lastMaintainTimestamp;

    @Column(name = "is_preferred")
    private Boolean isPreferred;

    @Column(name = "email_sequence_number")
    private Integer emailSequenceNumber;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date")
    private LocalDateTime createdDate;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "updated_date")
    private LocalDateTime updatedDate;

    // Getters and Setters
}

@Component
public class CardHolderEmailMapper {

    public CreditCardCustomerEmailEntity toEntity(CardHolderEmailAddressDetails details) {
        CreditCardCustomerEmailEntity entity = new CreditCardCustomerEmailEntity();

        // Setting the composite key (customer_id and email_id)
        CreditCardCustomerEmailId emailId = new CreditCardCustomerEmailId();
        emailId.setCustomerId(Long.valueOf(details.getChitl()));  // Map chitl to customerId
        emailId.setEmailId(Long.valueOf(details.getChemailAddr())); // Map email address to emailId
        entity.setId(emailId);

        // Map other fields
        entity.setEmailAddress(details.getChemailAddr());
        entity.setIsPreferred("Y".equalsIgnoreCase(details.getChemailPrfdFlg())); // Assuming it's a Y/N flag
        entity.setEmailSequenceNumber(Integer.valueOf(details.getChemailSeqNbr()));
        entity.setLastMaintainTimestamp(LocalDateTime.parse(details.getTms5())); // Assuming tms5 is a timestamp string
        
        // Set other fields such as created/updated dates as needed
        entity.setCreatedDate(LocalDateTime.now());  // Example
        entity.setUpdatedDate(LocalDateTime.now());  // Example
        
        return entity;
    }
}

INSERT INTO credit_card_customers (
    customer_id, 
    first_name, 
    last_name, 
    embossing_name, 
    middle_name, 
    suffix, 
    residential_country_code, 
    last_4_ssn, 
    birth_date, 
    deceased_date, 
    language_preferred_code, 
    is_language_affirmed, 
    language_affirm_date, 
    created_by, 
    created_date, 
    updated_by, 
    updated_date
) VALUES (
    1001, 
    'John', 
    'Doe', 
    'J.DOE', 
    'Michael', 
    'Sr', 
    'US', 
    '1234', 
    '1980-05-15', 
    NULL, 
    'EN', 
    TRUE, 
    '2023-01-01', 
    'admin', 
    NOW(), 
    'admin', 
    NOW()
);

INSERT INTO SECURITY (cusip, ticker, strategy_source, as_of_date, shares_quantity, shares_outstanding, market_value) 
VALUES 
('123456789', 'AAPL', 'Long-term', '2024-10-14', 1000, 5000000, 1500000000),
('987654321', 'MSFT', 'Growth', '2024-10-14', 1500, 7500000, 2300000000),
('456123789', 'GOOGL', 'Value', '2024-10-14', 800, 3000000, 1000000000),
('321654987', 'TSLA', 'Momentum', '2024-10-14', 500, 2000000, 900000000),
('789456123', 'AMZN', 'Income', '2024-10-14', 1200, 6000000, 1800000000);



="INSERT INTO public.credit_card_amp_entitlement (entitlement_id, channel_entitlement_id, entitlement_name, entitlement_description, channel_name, request_type, created_by, created_tms, updated_by, updated_tms) VALUES (" &
IF(A3<>"", "'" & A3 & "'", "NULL") & ", " &
IF(B3<>"", "'" & B3 & "'", "NULL") & ", " &
IF(C3<>"", "'" & C3 & "'", "NULL") & ", " &
IF(D3<>"", "'" & D3 & "'", "NULL") & ", " &
IF(E3<>"", "'" & E3 & "'", "NULL") & ", " &
IF(F3<>"", "'" & F3 & "'", "NULL") & ", " &
IF(G3<>"", "'" & G3 & "'", "NULL") & ", " &
IF(H3<>"", "'" & H3 & "'", "NULL") & ", " &
IF(I3<>"", "'" & I3 & "'", "NULL") & ", " &
IF(J3<>"", "'" & J3 & "'", "NULL") & ");"



="INSERT INTO public.credit_card_amp_accessrole (role_id, role_name, role_description, role_abbreviation, created_by, created_tms, updated_by, updated_tms) VALUES (" &
IF(A3<>"", "'" & A3 & "'", "NULL") & ", " &
IF(B3<>"", "'" & B3 & "'", "NULL") & ", " &
IF(C3<>"", "'" & C3 & "'", "NULL") & ", " &
IF(D3<>"", "'" & D3 & "'", "NULL") & ", " &
IF(E3<>"", "'" & E3 & "'", "NULL") & ", " &
IF(F3<>"", "TO_TIMESTAMP('" & F3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ", " &
IF(G3<>"", "'" & G3 & "'", "NULL") & ", " &
IF(H3<>"", "TO_TIMESTAMP('" & H3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ");"


="INSERT INTO public.credit_card_amp_accessrole_entitlement (role_id, entitlement_id, created_by, created_tms, updated_by, updated_tms) VALUES (" &
IF(A3<>"", "'" & A3 & "'", "NULL") & ", " &
IF(B3<>"", "'" & B3 & "'", "NULL") & ", " &
IF(C3<>"", "'" & C3 & "'", "NULL") & ", " &
IF(D3<>"", "TO_TIMESTAMP('" & D3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ", " &
IF(E3<>"", "'" & E3 & "'", "NULL") & ", " &
IF(F3<>"", "TO_TIMESTAMP('" & F3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ");"

="INSERT INTO public.credit_card_amp_policy (policy_id, access_role_id, policy_name, policy_description, policy_abbreviation, created_by, created_tms, updated_by, updated_tms) VALUES (" &
IF(A3<>"", "'" & A3 & "'", "NULL") & ", " &
IF(B3<>"", "'" & B3 & "'", "NULL") & ", " &
IF(C3<>"", "'" & C3 & "'", "NULL") & ", " &
IF(D3<>"", "'" & D3 & "'", "NULL") & ", " &
IF(E3<>"", "'" & E3 & "'", "NULL") & ", " &
IF(F3<>"", "'" & F3 & "'", "NULL") & ", " &
IF(G3<>"", "TO_TIMESTAMP('" & G3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ", " &
IF(H3<>"", "'" & H3 & "'", "NULL") & ", " &
IF(I3<>"", "TO_TIMESTAMP('" & I3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ");"




="INSERT INTO public.credit_card_amp_policy_entitlement (policy_id, entitlement_id, created_by, created_tms, updated_by, updated_tms) VALUES (" &
IF(A3<>"", "'" & A3 & "'", "NULL") & ", " &
IF(B3<>"", "'" & B3 & "'", "NULL") & ", " &
IF(C3<>"", "'" & C3 & "'", "NULL") & ", " &
IF(D3<>"", "TO_TIMESTAMP('" & D3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ", " &
IF(E3<>"", "'" & E3 & "'", "NULL") & ", " &
IF(F3<>"", "TO_TIMESTAMP('" & F3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ");"

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
    <exclusions>
        <exclusion>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </exclusion>
        <exclusion>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
        </exclusion>
    </exclusions>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <exclusions>
        <exclusion>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </exclusion>
    </exclusions>
</dependency>

<dependency>
    <groupId>org.apache.logging.log4j</groupId>
    <artifactId>log4j-slf4j-impl</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter</artifactId>
    <exclusions>
        <exclusion>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-to-slf4j</artifactId>
        </exclusion>
    </exclusions>
</dependency>



="INSERT INTO public.credit_card_amp_account_policy (account_id, customer_id, policy_id, pending_policy_id, digital_ind, digital_status, opt_in_flag, enrollment_action, enrollment_date, request_date, created_by, created_tms, updated_by, updated_tms) VALUES (" &
IF(A3<>"", "'" & A3 & "'", "NULL") & ", " &
IF(B3<>"", "'" & B3 & "'", "NULL") & ", " &
IF(C3<>"", "'" & C3 & "'", "NULL") & ", " &
IF(D3<>"", "'" & D3 & "'", "NULL") & ", " &
IF(E3<>"", "'" & E3 & "'", "NULL") & ", " &
IF(F3<>"", "'" & F3 & "'", "NULL") & ", " &
IF(G3<>"", "'" & G3 & "'", "NULL") & ", " &
IF(H3<>"", "'" & H3 & "'", "NULL") & ", " &
IF(I3<>"", "'" & I3 & "'", "NULL") & ", " &
IF(J3<>"", "TO_DATE('" & J3 & "', 'MM/DD/YYYY')", "NULL") & ", " &
IF(K3<>"", "'" & K3 & "'", "NULL") & ", " &
IF(L3<>"", "TO_TIMESTAMP('" & L3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ", " &
IF(M3<>"", "'" & M3 & "'", "NULL") & ", " &
IF(N3<>"", "TO_TIMESTAMP('" & N3 & "', 'YYYY-MM-DD HH24:MI:SS')", "NULL") & ");"


SELECT account_id, customer_id
FROM (
    VALUES 
        (101, 1001),
        (102, 1002),
        (103, 1003)
) AS excel_data(account_id, customer_id)
WHERE (account_id, customer_id) NOT IN (
    SELECT account_id, customer_id
    FROM account_customer_relation_table
);



import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpRequestDecorator;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

public Mono<Void> filter(ServerWebExchange webExchange, WebFilterChain filterChain) {
    ServerHttpRequest originalRequest = webExchange.getRequest();
    URI originalUri = originalRequest.getURI();
    
    String xAuthorization = originalRequest.getHeaders().getFirst("X-Authorization");
    URI modifiedUri = xAuthorization != null ? URI.create(originalUri.toString() + "s") : originalUri;

    ServerHttpRequest mutatedRequest = new ServerHttpRequestDecorator(originalRequest) {
        @Override
        public URI getURI() {
            return modifiedUri;
        }

        @Override
        public HttpHeaders getHeaders() {
            HttpHeaders headers = new HttpHeaders();
            headers.putAll(super.getHeaders());
            if (xAuthorization != null) {
                headers.remove("X-Authorization");
                headers.add("Authorization", "Modified " + xAuthorization);
            }
            return headers;
        }
    };

    return filterChain.filter(webExchange.mutate().request(mutatedRequest).build());
}



import org.springframework.security.web.server.firewall.ServerHttpSecurity;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;

@EnableWebFluxSecurity
public class SecurityConfig {
    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {
        http.csrf().disable()
            .authorizeExchange()
            .anyExchange().permitAll()
            .and()
            .httpFirewall(firewall -> firewall.allowedHeaderNames(header -> true)); // Allows custom headers
        return http.build();
    }
}


public class ServerHttpRequestPreProcessorFilter implements WebFilter {

    private final WebFlowHandler webFlowHandler;
    private static final Logger LOG = LoggerFactory.getLogger(ServerHttpRequestPreProcessorFilter.class);

    public ServerHttpRequestPreProcessorFilter(WebFlowHandler webFlowHandler) {
        this.webFlowHandler = webFlowHandler;
    }

    @Override
    public Mono<Void> filter(ServerWebExchange webExchange, WebFilterChain filterChain) {
        try {
            long startTS = System.currentTimeMillis();
            URI uri = webExchange.getRequest().getURI();
            String xAuthorization = webExchange.getRequest().getHeaders().getFirst(MutableHttpHeaders.X_AUTHORIZATION);

            AtomicReference<ServerHttpRequest> atomic = new AtomicReference<>(webExchange.getRequest());

            // BEFORE FIX: Directly mutating the request headers and URI
            /*
            if (uri.toASCIIString().endsWith("/graphql")) {
                atomic.set(webExchange.getRequest().mutate()
                        .uri(URI.create(uri.toASCIIString() + "s"))
                        .headers(header -> {
                            header.remove(MutableHttpHeaders.X_AUTHORIZATION);
                            header.add(MutableHttpHeaders.AUTHORIZATION, "Modified " + xAuthorization);
                        }).build());
            }
            */

            // AFTER FIX: Using ServerHttpRequestDecorator for header and URI mutation
            if (uri.toASCIIString().endsWith("/graphql")) {
                URI modifiedUri = URI.create(uri.toASCIIString() + "s");
                atomic.set(new ServerHttpRequestDecorator(webExchange.getRequest()) {
                    @Override
                    public URI getURI() {
                        return modifiedUri;
                    }

                    @Override
                    public HttpHeaders getHeaders() {
                        HttpHeaders headers = new HttpHeaders();
                        headers.putAll(super.getHeaders());
                        if (xAuthorization != null) {
                            headers.remove(MutableHttpHeaders.X_AUTHORIZATION);
                            headers.add(MutableHttpHeaders.AUTHORIZATION, "Modified " + xAuthorization);
                        }
                        return headers;
                    }
                });
            }

            // Continue with the (possibly) mutated request
            return Mono.just(webExchange).flatMap((webExchange0) -> {
                WebFluxServerHttpRequest webFluxServerHttpRequest = atomic.get() != null
                        ? new WebFluxServerHttpRequest(atomic.get()).build()
                        : null;
                ServerWebExchange mutatedWebExchange = webExchange.mutate().request(webFluxServerHttpRequest).build();
                TrustedClient trustedClient = TrustedClient.with(clientId: "ANONYMOUS_USER", scope: null, authorities: null).build();
                initContextThreadLocalAccessor();
                return Mono.defer(() -> filterChain.filter(mutatedWebExchange))
                        .doFinally(signal -> {
                            long executionTS = System.currentTimeMillis() - startTS;
                            LOG.info("HTTP {} request at: {}, processed successfully. ExecutionTS: {}ms", 
                                    webFluxServerHttpRequest.getMethod().toString().toLowerCase(), executionTS);
                        });
            });

        } catch (Exception ex) {
            LOG.error("Exception in processing request: ", ex);
            return Mono.error(ex);
        }
    }

    private void initContextThreadLocalAccessor() {
        // Your existing thread-local initialization logic here
    }
}


# Enable GCP Secret Manager
spring.cloud.gcp.secretmanager.enabled=true

# Specify your GCP Project ID (replace with your actual project ID)
spring.cloud.gcp.project-id=your-project-id

# Reference secrets using the sm:// prefix
spring.datasource.private-key=${sm://private-key}
spring.datasource.passphrase=${sm://private-key-passphrase}

gcloud auth application-default print-access-token

gcloud secrets versions access latest \
  --secret=samna-snowflake-admin-bamboo-user-auth-passphrase \
  --project=

gcloud projects get-iam-policy cs-wa

gcloud projects add-iam-policy-binding cs-wa \
  --member="user:<YOUR_EMAIL>" \
  --role="roles/secretmanager.secretAccessor"
gcloud services enable secretmanager.googleapis.com --project=cs-w

echo %GOOGLE_APPLICATION_CREDENTIALS%

gcloud services enable secretmanager.googleapis.com --project=cs-




