INSERT INTO credit_card_amp_accessrole (role_id, role_name, role_description, role_abbreviation)
VALUES 
(1, 'Admin', 'Administrator Role', 'ADM'),
(2, 'User', 'User Role', 'USR'),
(3, 'Viewer', 'Viewer Role', 'VWR');


INSERT INTO credit_card_amp_entitlement (entitlement_id, channel_entitlement_id, entitlement_name, entitlement_description, channel_name, request_type)
VALUES 
(1, 'CHANNEL_001', 'Read Access', 'Access to read data', 'Online Channel', 'GET'),
(2, 'CHANNEL_002', 'Write Access', 'Access to write data', 'Mobile Channel', 'POST'),
(3, 'CHANNEL_003', 'Admin Access', 'Admin level access', 'Admin Channel', 'ALL');


INSERT INTO credit_card_amp_policy (policy_id, bu_partner_id, access_role_id, policy_name, policy_description, policy_abbreviation)
VALUES 
(1, 1, 1, 'Default Admin Policy', 'Policy for administrators', 'ADM_POL'),
(2, 2, 2, 'Default User Policy', 'Policy for users', 'USR_POL'),
(3, 3, 3, 'Default Viewer Policy', 'Policy for viewers', 'VWR_POL');


INSERT INTO credit_card_amp_accessrole_entitlement (entitlement_id, role_id)
VALUES 
(1, 1),
(2, 2),
(3, 3);


INSERT INTO credit_card_amp_policy_entitlement (entitlement_id, policy_id)
VALUES 
(1, 1),
(2, 2),
(3, 3);

ENTRYPOINT ["java","-jar","/app/your-spring-boot-app.jar"]


CREATE TABLE security (
    cusip STRING PRIMARY KEY,
    ticker STRING,
    strategy_source STRING,
    as_of_date DATE,
    shares_quantity NUMBER(18,2),
    shares_outstanding NUMBER(18,2),
    market_value NUMBER(18,2)
);
INSERT INTO security (cusip, ticker, strategy_source, as_of_date, shares_quantity, shares_outstanding, market_value)
VALUES 
('123456789', 'AAPL', 'CSIM MFs', '2024-06-05', 500000.00, 1000000.00, 1500000.50),
('987654321', 'MSFT', 'CSIM MFs', '2024-06-05', 750000.00, 2000000.00, 2500000.75);
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always

@Entity
@Table(name = "credit_card_customers")
public class CreditCardCustomer {

    @Id
    @Column(name = "customer_id")
    private Long customerId;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @Column(name = "embossing_name")
    private String embossingName;

    @Column(name = "middle_name")
    private String middleName;

    @Column(name = "suffix")
    private String suffix;

    @Column(name = "residential_country_code")
    private String residentialCountryCode;

    @Column(name = "last_4_ssn")
    private String last4Ssn;

    @Column(name = "birth_date")
    private LocalDate birthDate;

    @Column(name = "deceased_date")
    private LocalDate deceasedDate;

    @Column(name = "language_preferred_code")
    private String languagePreferredCode;

    @Column(name = "is_language_affirmed")
    private Boolean isLanguageAffirmed;

    @Column(name = "language_affirm_date")
    private LocalDate languageAffirmDate;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date")
    private LocalDateTime createdDate;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "updated_date")
    private LocalDateTime updatedDate;

    // Getters and Setters
}

@Embeddable
public class CreditCardCustomerEmailId implements Serializable {

    @Column(name = "customer_id")
    private Long customerId;

    @Column(name = "email_id")
    private Long emailId;

    // Getters, Setters, equals(), and hashCode() methods
}


@OneToMany(mappedBy = "customer")
private List<CreditCardCustomerEmail> emails;

@ManyToOne
@JoinColumn(name = "customer_id", insertable = false, updatable = false)
private CreditCardCustomer customer;

@Entity
@Table(name = "credit_card_customers")
public class CreditCardCustomer {

    @Id
    @Column(name = "customer_id")
    private Long customerId;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @Column(name = "embossing_name")
    private String embossingName;

    @Column(name = "middle_name")
    private String middleName;

    @Column(name = "suffix")
    private String suffix;

    @Column(name = "residential_country_code")
    private String residentialCountryCode;

    @Column(name = "last_4_ssn")
    private String last4Ssn;

    @Column(name = "birth_date")
    private LocalDate birthDate;

    @Column(name = "deceased_date")
    private LocalDate deceasedDate;

    @Column(name = "language_preferred_code")
    private String languagePreferredCode;

    @Column(name = "is_language_affirmed")
    private Boolean isLanguageAffirmed;

    @Column(name = "language_affirm_date")
    private LocalDate languageAffirmDate;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date")
    private LocalDateTime createdDate;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "updated_date")
    private LocalDateTime updatedDate;

    // Getters and Setters
}

@Entity
@Table(name = "credit_card_customer_email_by_customer_id")
public class CreditCardCustomerEmail {

    @EmbeddedId
    private CreditCardCustomerEmailId id;

    @Column(name = "email_address")
    private String emailAddress;

    @Column(name = "last_maintain_timestamp")
    private LocalDateTime lastMaintainTimestamp;

    @Column(name = "is_preferred")
    private Boolean isPreferred;

    @Column(name = "email_sequence_number")
    private Integer emailSequenceNumber;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date")
    private LocalDateTime createdDate;

    @Column(name = "updated_by")
    private String updatedBy;

    @Column(name = "updated_date")
    private LocalDateTime updatedDate;

    // Getters and Setters
}



